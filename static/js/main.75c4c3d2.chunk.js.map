{"version":3,"sources":["components/card/card-component.jsx","components/card-list/card-list.component.jsx","components/search-box/search-box.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","alt","src","monster","name","email","CardList","probs","console","log","monsters","map","id","SearchBox","placeholder","handleChange","type","onChange","App","e","setState","searchField","target","value","state","bind","fetch","then","response","json","users","this","filteredMonsters","filter","toLowerCase","includes","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"uTAIaA,EAAO,SAACC,GAAD,OACpB,sBAAKC,UAAW,iBAAhB,UACA,qBAAKC,IAAM,UAAUC,IAAK,mEAC1B,mCAAMH,EAAMI,QAAQC,KAApB,OAEA,kCAAKL,EAAMI,QAAQE,MAAnB,WCJaC,G,MAAW,SAAAC,GAIpB,OAFAC,QAAQC,IAAIF,GAEL,qBAAKP,UAAY,YAAjB,SACNO,EAAMG,SAASC,KAAI,SAAAR,GAAO,OACzB,cAAC,EAAD,CAAuBA,QAAWA,GAAvBA,EAAQS,WCNZC,G,MAAY,SAAC,GAAD,IAAEC,EAAF,EAAEA,YAAaC,EAAf,EAAeA,aAAf,OACtB,uBACAf,UAAU,SACVgB,KAAK,SACLF,YAAaA,EACbG,SAAYF,MCkCAG,E,kDArCb,aAAc,IAAD,8BACX,gBAeFH,aAAc,SAACI,GACb,EAAKC,SAAS,CAACC,YAAYF,EAAEG,OAAOC,SAdpC,EAAKC,MAAO,CACVd,SAAW,GACXW,YAAa,KAEf,EAAKN,aAAc,EAAKA,aAAaU,KAAlB,gBAPR,E,qDAUb,WAAoB,IAAD,OACjBC,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKV,SAAS,CAAEV,SAAWoB,S,oBAM5C,WACE,MAA+BC,KAAKP,MAA7Bd,EAAP,EAAOA,SAASW,EAAhB,EAAgBA,YACVW,EAAmBtB,EAASuB,QAAO,SAAA9B,GAAO,OAC9CA,EAAQC,KAAK8B,cAAcC,SAASd,EAAYa,kBAGlD,OACE,sBAAKlC,UAAU,MAAf,UACA,kDACE,cAAC,EAAD,CACAc,YAAY,kBACZC,aAAgBgB,KAAKhB,eAErB,cAAC,EAAD,CAAUL,SAAUsB,W,GAjCVI,aCMHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBZ,MAAK,YAAkD,IAA/Ca,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.75c4c3d2.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nimport './card.styles.css';\r\n\r\nexport const Card = (props)  => (\r\n<div className ='card-container'>\r\n<img alt = \"monster\" src={'https://robohash.org/${props.monster.id}?set=set2&size=180x180'}/>\r\n<h2> {props.monster.name} </h2>\r\n\r\n<p> {props.monster.email} </p>\r\n</div>\r\n);\r\n\r\n","import  React from \"react\";\r\n\r\nimport { Card } from \"../card/card-component\";\r\nimport './card-list.styles.css';\r\n\r\nexport const CardList = probs => {\r\n\r\n    console.log(probs);\r\n\r\n    return <div className = 'card-list'>\r\n    {probs.monsters.map(monster=>(\r\n      <Card key={monster.id} monster = {monster}/>\r\n    ))}\r\n    </div>\r\n};","import React from \"react\";\r\n\r\n\r\nimport './search-box.styles.css';\r\n\r\nexport const SearchBox = ({placeholder ,handleChange}) => (\r\n   <input\r\n   className='search'\r\n   type='search'  \r\n   placeholder={placeholder} \r\n   onChange = {handleChange} />\r\n);","import React, { Component } from 'react';\nimport './App.css';\nimport {CardList} from './components/card-list/card-list.component';\n\nimport { SearchBox} from './components/search-box/search-box.component'\n\nclass App extends Component{\n  constructor(){\n    super();\n\n    this.state ={\n      monsters : [],\n      searchField: ' '\n    };\n    this.handleChange =this.handleChange.bind(this);\n  \n  }\n  componentDidMount(){\n    fetch('https://jsonplaceholder.typicode.com/users')\n    .then(response => response.json())\n    .then(users => this.setState({ monsters : users })\n    );\n  }\n  handleChange =(e) => {\n    this.setState({searchField:e.target.value})\n  }\n  render() {\n    const {monsters,searchField} = this.state;\n    const filteredMonsters = monsters.filter(monster =>\n      monster.name.toLowerCase().includes(searchField.toLowerCase())\n    );\n    \n    return(\n      <div className='App'>\n      <h1>Abhishek Monster</h1>\n        <SearchBox\n        placeholder='search monsters' \n        handleChange = {this.handleChange} />\n\n        <CardList monsters={filteredMonsters}/>\n      </div>\n    )\n  }\n}\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}